{"version":3,"sources":["Navbar.js","Text.js","Input.js","getText.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","Navbar","fixed","Brand","href","className","React","Component","props","text","split","userInput","map","s","i","color","length","key","style","backgroundColor","initialState","Input","state","onRestart","setState","resetTimer","userInputChange","e","value","target","countDown","characterCount","wordCount","accuracyCount","word","words","characters","toFixed","console","log","accuracy","Fragment","Container","Row","Text","this","placeholder","onChange","onClick","Header","seconds","started","startCountDown","bind","tick","addCPM","addWPM","addAccuracy","clearInterval","intervalHandle","alert","myInterval","setInterval","count","Jumbotron","fluid","Col","xs","lg","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8560b7e4.chunk.js","sourcesContent":["import React from 'react';\nimport {Navbar} from 'react-bootstrap';\nimport './App.css'\n\nclass Navigation extends React.Component {\n    render() {\n      return  <Navbar fixed=\"top\">\n      <Navbar.Brand href=\"#home\" className=\"logo\">\n        Typing Test\n      </Navbar.Brand>\n    </Navbar>\n    }\n  }\n  \nexport default Navigation;","import React from 'react';\nimport './App.css';\n\n\n  export default (props) => {\n    const text = props.text.split(''); //make sample text 'Test' into an array \n    // const words = props.text.split(' '); \n    // console.log('wuts text', words)\n    const userInput = props.userInput.split(''); //also make the text that you're inputting an array\n    // console.log('wuts userInput', userInput)\n    // let correctCharacters = []; \n    return (\n      <div className=\"border rounded p-3 mb-4\">\n\n        {\n          text.map((s, i) => { //s refers to the individual letters in the sample text\n            let color;\n            if(i < props.userInput.length) { //check if theres actually something to compare\n              color = s === userInput[i] ? '#cce8d4' : '#f2c4d3';\n            } \n            // if(i < props.userInput.length) { //check if theres actually something to compare\n            //   color = s === userInput[i] ? correctCharacters.push(i) : console.log('nope')\n            // } \n            \n            // console.log('CPM', correctCharacters)\n          return <span key={i} style={{backgroundColor: color}}>{s}</span>\n          })\n        }\n\n      </div>\n    )\n  }","import React from 'react';\nimport {Container, Row} from 'react-bootstrap';\nimport Text from './Text';\nimport getText from './getText';\nimport './App.css';\n\nconst initialState = {\n    text: getText(),\n    userInput: ''\n}\n//===STOP\n// const text = initialState.text.split('')\n// const userInput = initialState.userInput.split('')\n\nclass Input extends React.Component {\n\n        state = initialState;\n      \n        onRestart = () => {\n            this.setState(initialState)\n            this.props.resetTimer();\n        }\n  \n        //targets each character being typed which would then update the state accordingly\n        userInputChange = (e) => {\n            const value = e.target.value;\n        \n            this.setState({\n                userInput: value\n            })\n            this.props.countDown() //Starts Timer\n\n            let characterCount = 0 //being passed as an argument to incrememt value\n            let wordCount = 0\n            let accuracyCount = 0\n\n            //COUNT WORD\n\n            for(let i = 0; i < this.state.text.length; i++) {\n                const word = this.state.text.split(' ')[i]\n\n                if(i < value.length) {\n                    if (word === value.split(' ')[i]) {\n                        wordCount = wordCount + 1;\n                    }\n                }\n            }\n\n            this.props.words(wordCount)\n\n            //COUNT CHARACTERS\n\n            for(let i = 0; i < this.state.text.length; i++) { //looping through \n                const s = this.state.text[i] //s is the index for every single letter\n                if(i < value.length) { //check if theres actually something to compare\n                    if (s === value[i]) { \n                    characterCount = characterCount + 1; \n                      }\n                  } \n            }\n            this.props.characters(characterCount)\n\n            //COUNT ACCURACY\n\n            for(let i = 0; i < this.state.text.length; i++) {\n                const word = this.state.text.split(' ')[i]\n\n                if(i < value.length) {\n                    if (word === value.split(' ')[i]) {\n                        accuracyCount = ( ((wordCount / word.length) * 100 ) / 100 ).toFixed(2);\n                        console.log('wut is accuracy count', (wordCount / word.length))\n                    }\n                }\n            }\n\n            this.props.accuracy(accuracyCount)\n        \n\n        }\n    //!!!! BELOW IS THE BOX SECTION WHERE YOU START TYPING !!!!!\n\n    render() {\n\n      return  <React.Fragment>\n          <Container className=\"text-box-container\">\n        <Row className=\"search-container\">\n        <Text className=\"text-box\" text={this.state.text} userInput={this.state.userInput} />\n        <textarea\n            className=\"form-control mb-3\" \n            placeholder=\"Start typing...\"\n            value={this.state.userInput}\n            onChange={this.userInputChange}\n        >\n        </textarea>\n\n        <div className=\"text-right\">\n            <button className=\"btn btn-light\" onClick={this.onRestart}>Restart</button>\n        </div>\n        </Row>\n      </Container>\n      </React.Fragment>\n    }\n  }\n  \nexport default Input;","export default () => {\n    const text = \"Mr. and Mrs. Dursley, of number four, Privet Drive, were proud to say that they were perfectly normal, thank you very much. They were the last people you'd expect to be involved in anything strange or mysterious, because they just didn't hold with such nonsense. Mr. Dursley was the director of a firm called Grunnings, which made drills. He was a big, beefy man with hardly any neck, although he did have a very large mustache. Mrs. Dursley was thin and blonde and had nearly twice the usual amount of neck, which came in very useful as she spent so much of her time craning over garden fences, spying on the neighbors.\"\n\n    return text\n}","import React from 'react';\nimport './App.css';\nimport Input from './Input';\nimport {Jumbotron, Container, Row, Col} from 'react-bootstrap';\n\nclass Header extends React.Component {\n\n    constructor (props) {\n        super(props);\n        this.state = {\n            seconds: '60',\n            characters: 0,\n            words: 0,\n            accuracy: 0,\n            started: false\n        }\n        this.startCountDown = this.startCountDown.bind(this);\n        this.tick = this.tick.bind(this);\n        this.resetTimer = this.resetTimer.bind(this);\n        this.addCPM = this.addCPM.bind(this);\n        this.addWPM = this.addWPM.bind(this);\n        this.addAccuracy = this.addAccuracy.bind(this); \n        console.log('++++', this.state.characters + 1)\n      }    \n\ntick () {\n       \n            const { seconds } = this.state\n            \n            if (seconds > 0) {\n                this.setState(({ seconds }) => ({\n                    seconds: seconds - 1\n                }))\n            }\n\n            if (seconds === 0) {\n                clearInterval(this.intervalHandle);\n\n                if (this.state.words > 50) {\n                    alert(\n                        ` Ura wizard! You type with a speed of ${this.state.words} WPM, ${this.state.characters} CPM, with ${this.state.accuracy}% accuracy!`\n                        )\n                }  if (this.state.words < 10)  {\n                    alert(\n                        ` ura turtle! You type with a speed of ${this.state.words} WPM, ${this.state.characters} CPM, with ${this.state.accuracy}% accuracy!`\n                        )\n                }\n              \n            }\n\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.myInterval)\n    }\n\n    startCountDown() {\n            if(!this.state.started) {\n                this.setState({started: true});\n                this.intervalHandle = setInterval(this.tick, 1000);\n                // console.log('wuts seconds', this.state.seconds)\n            }          \n    }\n\n    resetTimer() {\n        this.setState({ seconds: 0, characters: 0, words: 0 });\n     }\n\n    addCPM(count) { //waiting until you complete loop in input.js or it'll fire multiple times and not register the incorrect characters\n        this.setState({ characters: count });\n \n    }\n\n    addWPM(count) {\n        this.setState({ words: count });\n    }\n\n    addAccuracy(count) {\n        this.setState({accuracy: count });\n    }\n\n    render() {\n    \n    const { seconds }  = this.state\n    const { words } = this.state\n    const { characters } = this.state\n    const { accuracy } = this.state\n    // const userInput = props.userInput.split('')\n    // console.logIO\n      return  <React.Fragment>\n          <Jumbotron fluid className=\"jumbotron justify-content-center\">\n            <Container className=\"count-container\">\n                <Row className=\"char-count justify-content-md-center\">\n                    < Col xs lg=\"2\">\n    <h1>{ words }</h1><p className= \"count-name\">WORDS/MIN</p>\n                    </Col>\n                    <Col xs lg=\"2\">\n    <h1>{ characters } </h1><p className= \"count-name\">CHAR/MIN</p>\n                    </Col>\n                    <Col xs lg=\"2\">\n    <h1>{ accuracy }</h1><p className= \"count-name\">% ACCURACY</p>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <h1>{ seconds < 10 ? `0${seconds}` : seconds }</h1><p className= \"count-name\">TIME</p>\n                        {/* <button onClick={this.startCountDown}>Test Timer</button> */}\n                     </Col>\n                </Row>\n            </Container>\n        </Jumbotron>\n        <Input countDown={ this.startCountDown } resetTimer={ this.resetTimer } characters={ this.addCPM } words={ this.addWPM } accuracy={ this.addAccuracy }/>\n      </React.Fragment>\n    }\n  }\n\n  \nexport default Header;","import React from 'react';\nimport Navigation from './Navbar';\n\n// import Input from './Input';\nimport Header from './Header';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// const initialState = {\n//   text: 'Hello world',\n//   userInput: '',\n//   symbols: 0\n// }\n\nclass App extends React.Component {\n\n  // state = initialState;\n  \n  render() {\n  \n    return (\n      <div className=\"App\">\n        <Navigation />\n        <Header />\n      \n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}